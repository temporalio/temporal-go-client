// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.
package mocks

import (
	common "go.temporal.io/api/common/v1"

	mock "github.com/stretchr/testify/mock"
)

// DataConverter is an autogenerated mock type for the DataConverter type
type DataConverter struct {
	mock.Mock
}

// FromPayload provides a mock function with given fields: payload, valuePtr
func (_m *DataConverter) FromPayload(payload *common.Payload, valuePtr interface{}) error {
	ret := _m.Called(payload, valuePtr)

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Payload, interface{}) error); ok {
		r0 = rf(payload, valuePtr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FromPayloads provides a mock function with given fields: payloads, valuePtrs
func (_m *DataConverter) FromPayloads(payloads *common.Payloads, valuePtrs ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, payloads)
	_ca = append(_ca, valuePtrs...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Payloads, ...interface{}) error); ok {
		r0 = rf(payloads, valuePtrs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ToPayload provides a mock function with given fields: value
func (_m *DataConverter) ToPayload(value interface{}) (*common.Payload, error) {
	ret := _m.Called(value)

	var r0 *common.Payload
	if rf, ok := ret.Get(0).(func(interface{}) *common.Payload); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Payload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToPayloads provides a mock function with given fields: value
func (_m *DataConverter) ToPayloads(value ...interface{}) (*common.Payloads, error) {
	var _ca []interface{}
	_ca = append(_ca, value...)
	ret := _m.Called(_ca...)

	var r0 *common.Payloads
	if rf, ok := ret.Get(0).(func(...interface{}) *common.Payloads); ok {
		r0 = rf(value...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Payloads)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(value...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToString provides a mock function with given fields: input
func (_m *DataConverter) ToString(input *common.Payload) string {
	ret := _m.Called(input)

	var r0 string
	if rf, ok := ret.Get(0).(func(*common.Payload) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ToStrings provides a mock function with given fields: input
func (_m *DataConverter) ToStrings(input *common.Payloads) []string {
	ret := _m.Called(input)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*common.Payloads) []string); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}
